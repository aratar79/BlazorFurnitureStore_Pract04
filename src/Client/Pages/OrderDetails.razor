@page "/orderdetails"
@page "/orderDetails/{id:int}"
@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject IClientStoreService ClientStoreService
@inject IOrderService OrderService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar SnackBar
@attribute [Authorize]

<p>@Message</p>

@if (clients != null && Order != null)
{
    <EditForm Model="@Order" OnValidSubmit="SaveOrder">

        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-12 mb-3 mt-3 text-center">
                            <input type="submit" class="btn btn-success" value="Save" />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label>Number</label>
                            <InputNumber class="form-control" @bind-Value="@Order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label>Order Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.OrderDate" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label>Client</label>
                            <InputSelect class="form-control" @bind-Value="@Order.ClientId">
                                @foreach (var client in clients)
                                    {
                                    <option value="@client.Id">@client.FullName</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label>Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label>Total</label>
                            <input type="text" class="form-control text-right" readonly="readonly" value="@Order.Total.ToString("C2")" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-12 mt-3 text-center">
                            <input type="button" class="btn btn-secondary" value="Add Product" @onclick="AddProduct" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        @if (Order.Products != null && Order.Products.Any())
        {
            <MudTable class="mt-4" Items="@Order.Products" Hover="true" Breakpoint="Breakpoint.Sm" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate Context="ProductContext">
                    <MudTd DataLabel="Name">@ProductContext.Name</MudTd>
                    <MudTd DataLabel="Price">@ProductContext.Price</MudTd>
                    <MudTd DataLabel="Quantity">@ProductContext.Quantity</MudTd>
                    <MudTd DataLabel="">
                        <MudFab OnClick="@(() => RemoveProduct(ProductContext.Id))"
                                Color="Color.Warning"
                                Icon="@Icons.Material.Filled.DeleteForever"
                                Size="Size.Small"
                                IconSize="Size.Small">

                        </MudFab>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }

    </EditForm>
}
else
{
    <p><em>Loading....</em></p>
}

@code {

    public Order Order;
    public IEnumerable<ClientStore> clients;
    public string Message { get; set; }

    [Parameter] public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (id > 0)
            {
                Order = await OrderService.GetOrderById(id);
            }
            else
            {
                Order = new Order()
                {
                    OrderNumber = await OrderService.GetNextNumber(),
                    ProductCategoryId = 1,
                    OrderDate = DateTime.Today,
                    DeliveryDate = DateTime.Today.AddDays(7)
                };
            }

            clients = await ClientStoreService.GetAll();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    protected async Task SaveOrder()
    {
        await OrderService.SaveOrder(Order);
        NavigationHome();
    }

    private void NavigationHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void Cancel()
    {
        NavigationHome();
    }

    protected async Task AddProduct()
    {
        var dialog = DialogService.Show<ProductDetails>("Hola que ase");
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            var product = (Product)result.Data;

            if (Order.Products == null) Order.Products = new List<Product>();

            Order.Products.Add(product);
        }
    }

    protected void RemoveProduct(int Id)
    {
        Order.Products.RemoveAll(p => p.Id == Id);
        SnackBar.Add("Pruduct deleted", Severity.Error, a => a.VisibleStateDuration = 150);
    }

}
