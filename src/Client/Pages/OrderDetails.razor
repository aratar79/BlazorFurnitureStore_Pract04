@page "/orderdetails"
@inject IProductCategoryService ProductCategoryService
@inject IProductService ProductService
@inject IClientStoreService ClientStoreService


<p>@Message</p>

@if (productCategories != null && Order != null) 
{
    <EditForm Model="@Order">

        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-4 mb-3">

                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Save" />
                            <input type="button" class="btn btn secondary" value="Cancel" />
                        </div>
                        <div class="col-md-4 mb-3">

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label>Number</label>
                            <InputNumber class="form-control" @bind-Value="@Order.OrderNumber" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label>Order Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.OrderDate" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label>Client</label>
                            <InputSelect class="form-control" @bind-Value="ClientId">
                                @foreach (var client in clients)
                                    {
                                    <option value="@client.Id">@client.FullName</option>
                                    }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label>Delivery Date</label>
                            <InputDate class="form-control" @bind-Value="@Order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label>Total</label>
                            <InputNumber class="form-control" @bind-Value="@Order.Total" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <label>Categories</label>
        <InputSelect class="form-control col-sm-5"
                     Value="@Order.ProductCategoryId"
                     ValueChanged="@((int productCategoryId) => ProductCategoryHasChange(productCategoryId))"
                     ValueExpression="@(()=>Order.ProductCategoryId)">
            @foreach (var item in productCategories)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </InputSelect>
        <br />
        <label>Products</label>
        <InputSelect class="form-control col-sm-5" @bind-Value="@ProductId">
            @foreach (var item in products)
                {
                <option value="@item.Id">@item.Name</option>
                }
        </InputSelect>
    </EditForm>
}
else
{
    <p><em>Loading....</em></p>
}

@code {

    public Order Order;
    public IEnumerable<ProductCategory> productCategories;
    public IEnumerable<Product> products;
    public IEnumerable<ClientStore> clients;
    public string Message { get; set; }
    public int ProductId { get; set; }
    public int ClientId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Order = new Order() { ProductCategoryId = 1 };
            productCategories = await ProductCategoryService.GetAll();
            await LoadProducts(Order.ProductCategoryId);
            await LoadClients();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    protected async Task ProductCategoryHasChange(int productCategoryId)
    {
        Order.ProductCategoryId = productCategoryId;
        if (Order.ProductCategoryId > 0)
            await LoadProducts(Order.ProductCategoryId);

    }

    private async Task LoadProducts(int productCategoryId)
    {
        var result = await ProductService.GetByCategory(productCategoryId);
        products = result;
    }

    private async Task LoadClients()
    {
        clients = await ClientStoreService.GetAll();
    }
}
